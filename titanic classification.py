# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14DCV0aNOLl3Hrrilcu7ilVleLAfeqsIw
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

df= pd.read_csv('/content/tested.csv')
df



df.head(10)

df.describe()

df.tail(10)

df.dtypes

df.isnull().sum

df['Age'] = df['Age'].fillna(df['Age'].mean())
df['Fare'] = df['Fare'].fillna(df['Fare'].mean())

Embarked = df['Embarked'].unique()
for Embarkeds in Embarked:
    print("->",Embarkeds)

df['Embarked'] = df['Embarked'].map( {'Q': 0,'S':1,'C':2}).astype(int)
df['Sex'] = df['Sex'].map( {'female': 1,'male':0}).astype(int)

df['Age'] = df['Age'].astype(int)

df['Fare'] = df['Fare'].astype(int)

data = df.drop(['PassengerId','Name','Cabin','Ticket'], axis =1, inplace=True)

fig = plt.figure(figsize =(10, 7))
plt.hist(x = [df[df['Survived']==1]['Age'], df[df['Survived']==0]['Age']],stacked=True, color = ['g','r'],label = ['Survived','Not survived'])
plt.title('Age Histogram with Survival')
plt.xlabel('Age')
plt.ylabel('No of passengers')
plt.legend()

fig = plt.figure(figsize =(10, 7))
plt.hist(x = [df[df['Survived']==1]['Fare'], df[df['Survived']==0]['Fare']], stacked=True, color = ['g','r'],label = ['Survived','Not survived'])
plt.title('Fare Histogram with Survival')
plt.xlabel('Fare')
plt.ylabel('No of passengers')
plt.legend()

column = 'Survived'

# Create a bar chart
survival_counts = df[column].value_counts()
survival_counts.plot(kind='pie', rot=0,colors='green')

# Adding labels and title
plt.xlabel('Survived')
plt.ylabel('Count')
plt.title('Survival Count (1 = yes, 0 = no)')

# Show the plot
plt.show()

Train = df.drop(['Survived'], axis=1)
Test = df.iloc[:,1]
X_train, x_test, Y_train, y_test = train_test_split(Train, Test, test_size = 0.2, random_state = 1)

model = LogisticRegression()

model.fit(X_train, Y_train)

LogisticRegression()

X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)

x_test_prediction = model.predict(x_test)

print(x_test_prediction)

test_data_accuracy = accuracy_score(y_test, x_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)